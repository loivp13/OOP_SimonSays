{"version":3,"sources":["js/main.js"],"names":["OperateLights","lights","document","querySelector","documentn","timing","interval","toggleLights","i","setTimeout","push","forEach","e","clearInterval","classList","add","remove","arr","forceOff","delay","curButton","j","dataset","num","k","console","log","LightOperator","SimonSaid","count","on","strict","start","level","win","turn","aiPicks","userPicks","displayCount","powerButton","power","bind","reset","powerOnLights","style","backgroundColor","textContent","countDown","powerOffLights","innerHTML","curCount","updateCount","play","winner","Math","round","random","aiPicksColors","color","checkClick","length","toggleCorrectLights","toggleIncorrectLights","pop","Game","resetNode","addEventListener","powerNode","strictNode","hard","greenButton","buttonClick","redButton","yellowButton","blueButton"],"mappings":"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","file":"main.4402744a.js","sourceRoot":"..","sourcesContent":["class OperateLights {\r\n  constructor() {\r\n    this.lights = [\r\n      document.querySelector(\".yellowButton\"),\r\n      document.querySelector(\".blueButton\"),\r\n      documentn.querySelector(\".redButton\"),\r\n      document.querySelector(\".greenButton\"),\r\n    ];\r\n    this.timing = 300;\r\n    this.interval = [];\r\n  }\r\n\r\n  powerOnLights() {\r\n    this.toggleLights([0, 1, 2, 3], 0);\r\n\r\n    let i = setTimeout(() => {\r\n      this.toggleLights([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], 150);\r\n    }, this.timing);\r\n    this.interval.push(i);\r\n  }\r\n  powerOffLights() {\r\n    this.interval.forEach((e) => {\r\n      clearInterval(e);\r\n    });\r\n    this.toggleLights([0, 1, 2, 3], 10, true);\r\n  }\r\n  toggleIncorrectLights() {\r\n    let i;\r\n    this.lights.forEach((e) => {\r\n      e.classList.add(\"incorrect-background\");\r\n      let i = setTimeout(() => {\r\n        e.classList.remove(\"incorrect-background\");\r\n      }, 200);\r\n    });\r\n    this.interval.push(i);\r\n  }\r\n  toggleCorrectLights() {\r\n    let i;\r\n    this.lights.forEach((e) => {\r\n      e.classList.add(\"correct-background\");\r\n      let i = setTimeout(() => {\r\n        e.classList.remove(\"correct-background\");\r\n      }, 200);\r\n    });\r\n    this.interval.push(i);\r\n  }\r\n  toggleLights(arr, interval, forceOff) {\r\n    let delay = 0;\r\n    if (interval === 0) {\r\n      //if interval is 0 default delay setTimeout for adding to 0 and removing to 200ms\r\n      arr.forEach((e, i) => {\r\n        let curButton = this.lights[e];\r\n        let j = setTimeout(() => {\r\n          curButton.classList.add(`button-${curButton.dataset.num}`);\r\n        }, 0);\r\n        let k = setTimeout(() => {\r\n          curButton.classList.remove(`button-${curButton.dataset.num}`);\r\n        }, this.timing);\r\n        this.interval.push(j);\r\n        this.interval.push(k);\r\n      });\r\n      //remove color when switch off\r\n    } else if (forceOff === true) {\r\n      arr.forEach((e) => {\r\n        this.lights[e].classList.remove(`button-${this.lights[e].dataset.num}`);\r\n      });\r\n      //loop through; add/remove color by settimeout\r\n    } else {\r\n      arr.forEach((e, i) => {\r\n        let curButton = this.lights[e];\r\n        console.log(e);\r\n        let j = setTimeout(() => {\r\n          curButton.classList.add(`button-${curButton.dataset.num}`);\r\n        }, delay);\r\n        delay += interval;\r\n        let k = setTimeout(() => {\r\n          curButton.classList.remove(`button-${curButton.dataset.num}`);\r\n        }, delay);\r\n        delay += interval;\r\n        this.interval.push(j);\r\n        this.interval.push(k);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nlet LightOperator = new OperateLights();\r\n\r\nclass SimonSaid {\r\n  constructor() {\r\n    this.count = 0;\r\n    this.on = false;\r\n    this.strict = false;\r\n    this.start = false;\r\n    this.level = 1;\r\n    this.win = false;\r\n    this.turn = \"ai\";\r\n\r\n    this.aiPicks = [];\r\n    this.userPicks = [];\r\n\r\n    //elementNode\r\n    this.displayCount = document.querySelector(\"#displayCount\");\r\n    this.powerButton = document.querySelector(\"#powerButton\");\r\n\r\n    //binding\r\n    this.power = this.power.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n\r\n    //store intervals to clear when turning off power\r\n    this.interval = [];\r\n  }\r\n\r\n  power() {\r\n    this.on = !this.on;\r\n    if (this.on) {\r\n      LightOperator.powerOnLights();\r\n      this.powerButton.style.backgroundColor = \"green\";\r\n      this.powerButton.textContent = \"On\";\r\n      this.countDown();\r\n    } else {\r\n      this.interval.forEach((e) => {\r\n        clearInterval(e);\r\n      });\r\n      LightOperator.powerOffLights();\r\n      this.reset();\r\n      this.powerButton.style.backgroundColor = \"red\";\r\n      this.powerButton.textContent = \"Off\";\r\n    }\r\n  }\r\n  updateCount(count) {\r\n    this.displayCount.innerHTML = count;\r\n  }\r\n  countDown() {\r\n    let count = 3;\r\n    let delay = 0;\r\n    while (count >= 0) {\r\n      let curCount = count;\r\n      let i;\r\n      let j;\r\n      if (count === 0) {\r\n        i = setTimeout(() => {\r\n          this.updateCount(curCount);\r\n          j = setTimeout(() => {\r\n            this.play();\r\n          }, 1900);\r\n        }, delay);\r\n      } else {\r\n        i = setTimeout(() => {\r\n          this.updateCount(curCount);\r\n        }, delay);\r\n      }\r\n\r\n      count--;\r\n      delay += 1000;\r\n      this.interval.push(i, j);\r\n    }\r\n  }\r\n  aiPicksColors() {\r\n    for (let i = 0; i < this.level; i++) {\r\n      if (this.level === 5) {\r\n        console.log(this);\r\n        this.winner();\r\n        break;\r\n      } else {\r\n        this.aiPicks.push(Math.round(Math.random() * 3));\r\n      }\r\n    }\r\n    LightOperator.toggleLights(this.aiPicks, 300);\r\n  }\r\n  play() {\r\n    this.start = true;\r\n    this.updateCount(0);\r\n\r\n    //ai picks;\r\n    //plays lights;\r\n    this.aiPicksColors();\r\n    this.turn = \"user\";\r\n    //user picks;\r\n\r\n    //check if user picks correctly;\r\n    //no\r\n    //if isStrict  -> restart game,clear count;\r\n    //if !isStrict -> wait for user picka again\r\n    //yes: add color;\r\n    //if reach end -> add count\r\n    //if not end   -> wait for user to pick\r\n  }\r\n  winner() {\r\n    this.turn = \"ai\";\r\n    this.updateCount(\"win!\");\r\n    let i = setTimeout(() => {\r\n      console.log(this);\r\n      this.reset();\r\n    }, 1000);\r\n    this.interval.push(i);\r\n  }\r\n  reset() {\r\n    this.count = 0;\r\n    this.aiPicks = [];\r\n    this.userPicks = [];\r\n    this.win = false;\r\n    this.level = 1;\r\n    this.turn = \"ai\";\r\n    this.updateCount(this.count);\r\n    this.interval.forEach((e) => {\r\n      clearInterval(e);\r\n    });\r\n\r\n    let i = setTimeout(() => {\r\n      this.play();\r\n    }, 1500);\r\n    this.interval.push(i);\r\n  }\r\n  buttonClick(color) {\r\n    if (this.turn !== \"ai\" && this.on) {\r\n      this.turn = \"ai\";\r\n      this.userPicks.push(color);\r\n      this.checkClick(color);\r\n    }\r\n  }\r\n  checkClick(color) {\r\n    let i;\r\n    //if user picks correctly\r\n    if (\r\n      this.aiPicks[this.userPicks.length - 1] ===\r\n      this.userPicks[this.userPicks.length - 1]\r\n    ) {\r\n      console.log(\"correct\");\r\n      //toggle correctLights;\r\n      LightOperator.toggleCorrectLights();\r\n      //if user got all sequence increase level and count;\r\n      //choose new colors;\r\n      if (this.aiPicks.length === this.userPicks.length) {\r\n        this.count++;\r\n        this.updateCount(this.count);\r\n        this.level++;\r\n        this.userPicks = [];\r\n\r\n        i = setTimeout(() => {\r\n          this.aiPicksColors();\r\n          this.turn = \"user\";\r\n        }, 500);\r\n        //if user has not picked all sequence let user go again;\r\n      } else if (this.aiPicks.length > this.userPicks.length) {\r\n        //wait for user to pick another color\r\n        this.turn = \"user\";\r\n      }\r\n      //if user pick incorrectly remove choice and toggle inCorrect lights\r\n    } else {\r\n      LightOperator.toggleIncorrectLights();\r\n      console.log(this.userPicks, this.aiPicks);\r\n      this.userPicks.pop();\r\n      this.turn = \"user\";\r\n    }\r\n\r\n    this.interval.push(i);\r\n  }\r\n  hard() {\r\n    console.log(\"so strict\");\r\n  }\r\n}\r\n\r\nlet Game = new SimonSaid();\r\n\r\nlet resetNode = document.querySelector(\".resetButton\");\r\n// let powerNode = document.querySelector(\".powerButton\");\r\n// let strictNode = document.querySelector(\".strictButton\");\r\n// let = greenButton = document.querySelector(\".greenButton\");\r\n// let = blueButton = document.querySelector(\".blueButton\");\r\n// let = yellowButton = document.querySelector(\".yellowButton\");\r\n// let = redButton = document.querySelector(\".redButton\");\r\n\r\nif (resetNode) {\r\n  resetNode.addEventListener(\"click\", Game.reset);\r\n  powerNode.addEventListener(\"click\", Game.power);\r\n  strictNode.addEventListener(\"click\", Game.hard);\r\n}\r\nif (greenButton) {\r\n  greenButton.addEventListener(\"click\", function () {\r\n    Game.buttonClick(3);\r\n  });\r\n  redButton.addEventListener(\"click\", function () {\r\n    Game.buttonClick(2);\r\n  });\r\n  yellowButton.addEventListener(\"click\", function () {\r\n    Game.buttonClick(0);\r\n  });\r\n  blueButton.addEventListener(\"click\", function () {\r\n    Game.buttonClick(1);\r\n  });\r\n}\r\n"]}